=> Interger.parseInt() -------------

String x = "10";
System.out.println(Interger.parseInt(x));

o/p: 10 => String converted to int

=> Interger.toString() -------------

int x = 10;
System.out.println(Interger.toString(x));

o/p: "10" => int converted to String

=> toUpperCase() ------------

String name = "your name";
System.out.println(name.toUpperCase());

o/p: "YOUR NAME"

=> toLowerCase() ------------

String name = "YOUR NAME";
System.out.println(name.toLowerCase());

o/p: "your name"

=> equals() -------------

String x = "Ajay";
String y = "Ajay";
System.out.println(x.equals(y));

o/p: true => its compares the string data like "=="

=> Scanner() --------------

// scanners are used to get input from the terminal

import java.util.*; // import all packages including scanner

Scanner variableName = new Scanner(System.in); // creating object for scanner
String x = variableName.nextLine(); // this line consume or stores the string we type in terminal
int y = variableName.nextInt(); // this line consume or stores the int we type in terminal

=> charAt() ---------------

String x = "Hello";
System.out.println(charAt(0));

o/p: 'H'

=> length() --------------
String name = "Ajay";
System.out.println(name.length());

o/p: 4

=> isEmpty() -------------
String name = "";
System.out.println(name.isEmpty());

o/p: true => checks the string is empty or not

=> isBlank() --------------
String name = "\t   \n";
System.out.println(name.isBlank());

o/p: true => checks the string is blank or not, but not empty

=> indexOf() ---------------
String name = "Ajay";
System.out.println(name.indexOf('j'));

o/p: 1 => check the index of the given character 'j'

=> lastIndexOf() -------------
String name = "Hello world";
System.out.println(name.indexOf('l'));
System.out.println(name.lastIndexOf('l'));

o/p: 2 => checks the index of first 'l'
o/p: 9 => checks the index of last 'l'

=> startsWith() ----------------
String x = "Ajay shankar";
System.out.println(x.startsWith("Ajay"));

o/p: true => checks whether the string starts with the given word

=> endsWith() ----------------
String x = "Ajay shankar";
System.out.println(x.endsWith("shankar"));

o/p: true => checks whether the string ends with the given word

=> contains() ----------------
String x = "This world is cool";
System.out.println(x.contains("world"));

o/p: true => checks whether the string contains the word that is given

=> contentEquals() -------------

String x = "Ajay";
String y = "Ajay";
System.out.println(x.contentEquals(y));

o/p: true => the difference between 'contentEquals()' and 'equals()' is, 'contentEquals()' can compare
             StringBuilder's which 'equals()' method does not support

=> substring() -------------
String x = "hello world";
System.out.println(x.substring(1,5))

o/p: ello => this method is like slicing a string

=> String.join() ------------

String[] x={"apple","orange"};
System.out.println(String.join("/",x)); // joins an array

(OR)        

System.out.println(String.join("/","apple","orange"));

o/p: apple/orange =>joins a array or string

=> concat() -----------

String x = "Ajay ";
String y = "Shankar";
String z = x.concat(y);
System.out.println(z);

o/p: Ajay Shankar => concats a string

=> replace() -------------

String date = "25-03-2001";
System.out.println(date.replace("-","/"));

o/p: 25/03/2001 => replaces '-' with '/'

=> replaceFirst() ---------

String date = "25-03-2001";
System.out.println(date.replaceFirst("-","/"));

o/p: 25/03-2001 => replaces the first '-' with '/'

=> repeat() ------------

System.out.println("ABC\n".repeat(3));

o/p: 

ABC
ABC
ABC => repeats three times as given

=> indent() -----------

System.out.println("ABC\n".repeat(3).indent(8));

o/p:

    ABC
    ABC
    ABC => indents the output

=> trim() -----------

System.out.println("    Ajay shankar   ".trim());

o/p: Ajay shankar => trims out empty spaces


